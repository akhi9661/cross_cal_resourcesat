{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to cross_cal_resourcesat","text":"<p>A python package to cross calibrate ResourceSat 2 sensors like LISS III, AWiFS or LISS IV.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://akhi9661.github.io/cross_cal_resourcesat</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"Introduction/","title":"Introduction","text":"<p>This is a help file for using the <code>cross_cal_resourcesat</code> package.</p> <p>Install the library if not installed before.</p> In\u00a0[\u00a0]: Copied! <pre>%pip install cross_cal_resourcesat\n</pre> %pip install cross_cal_resourcesat <p><code>pip install cross_cal_resourcesat</code> will generally install the dependencies too. If not, install the dependencies.</p> In\u00a0[\u00a0]: Copied! <pre>%pip install gdal rasterio numpy glob2 regex\n</pre> %pip install gdal rasterio numpy glob2 regex <p>Many a times installing <code>gdal</code> from <code>pip</code> fails. In that case either use other channels like <code>conda-forge</code> or use a direct link.</p> In\u00a0[\u00a0]: Copied! <pre>%pip install --find-links = https://girder.github.io/large_image_wheels --no-cache GDAL\n</pre> %pip install --find-links = https://girder.github.io/large_image_wheels --no-cache GDAL <p>Import the dependency libraries in the environment.</p> In\u00a0[\u00a0]: Copied! <pre>import rasterio, os, re, math, glob, shutil\nfrom osgeo import gdal, osr, gdalconst\nimport numpy as np\n</pre> import rasterio, os, re, math, glob, shutil from osgeo import gdal, osr, gdalconst import numpy as np <p>Import <code>cross_cal_resourcesat</code> library.</p> In\u00a0[\u00a0]: Copied! <pre>import cross_cal_resourcesat\n</pre> import cross_cal_resourcesat <p>Set the paths to folder containing LISS III/AWiFS and reference sensors (Landsat 8/Sentinel 2). Use the absolute path. Note: If reference sensor is not Landsat 8 or Sentinel 2, then <code>inpf_ref</code> should point to folder containing reflectance images of reference sensor and not the radiance image.</p> In\u00a0[\u00a0]: Copied! <pre>inpf_liss = r'\\docs\\Examples\\liss'\ninpf_s2 = r'\\docs\\Examples\\ref_s2'\ninpf_l8 = r'\\docs\\Examples\\ref_l8'\ninpf_others = r'\\docs\\Examples\\ref_others\\reflectance'\n</pre> inpf_liss = r'\\docs\\Examples\\liss' inpf_s2 = r'\\docs\\Examples\\ref_s2' inpf_l8 = r'\\docs\\Examples\\ref_l8' inpf_others = r'\\docs\\Examples\\ref_others\\reflectance' <p>If <code>reference_sensor</code> is Landsat 8, use:</p> In\u00a0[\u00a0]: Copied! <pre>cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_l8, reference_sensor = 'Landsat 8')\n</pre> cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_l8, reference_sensor = 'Landsat 8') <p>If <code>reference_sensor</code> is Sentinel 2, use:</p> In\u00a0[\u00a0]: Copied! <pre>cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_s2, reference_sensor = 'Sentinel 2')\n</pre> cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_s2, reference_sensor = 'Sentinel 2') <p>For other reference sensors, set <code>reference_sensor = 'Others'</code></p> In\u00a0[\u00a0]: Copied! <pre>cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_others, reference_sensor = 'Others')\n</pre> cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_others, reference_sensor = 'Others')"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v013-16042023","title":"v0.1.3 - 16/04/2023","text":"<ul> <li>Added reflectance conversion for Landsat 8</li> <li>Fixed broken command line functionality</li> </ul>"},{"location":"changelog/#v012-12042023","title":"v0.1.2 - 12/04/2023","text":"<ul> <li>Added command line functionality</li> </ul>"},{"location":"changelog/#v011-11042023","title":"v0.1.1 - 11/04/2023","text":"<ul> <li>Added fix for reprojection.</li> </ul>"},{"location":"changelog/#v010-10042023","title":"v0.1.0 - 10/04/2023","text":"<ul> <li>Added all the functions. Ready to use.</li> </ul>"},{"location":"changelog/#v001-09042023","title":"v0.0.1 - 09/04/2023","text":"<ul> <li>Initial change</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/akhi9661/cross_cal_resourcesat/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>cross_cal_resourcesat could always use more documentation, whether as part of the official cross_cal_resourcesat docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/akhi9661/cross_cal_resourcesat/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up cross_cal_resourcesat for local development.</p> <ol> <li> <p>Fork the cross_cal_resourcesat repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/cross_cal_resourcesat.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv cross_cal_resourcesat\n$ cd cross_cal_resourcesat/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 cross_cal_resourcesat tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/akhi9661/cross_cal_resourcesat/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"cross_cal_resourcesat/","title":"cross_cal_resourcesat module","text":"<p>The following package contains the functions to perform cross calibration between LISS III and AWiFS and the reference image. </p>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.calc_calibration","title":"<code>calc_calibration(file_liss, file_ref)</code>","text":"<p>This function calculates the calibration factors for the LISS III/AWiFS bands.</p> <p>Parameters:</p> Name Type Description Default <code>file_liss</code> <code>str</code> <p>path to the composite image of LISS III or AWiFS</p> required <code>file_ref</code> <code>str</code> <p>path to the composite image of the reference image</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def calc_calibration(file_liss, file_ref):\n\n\"\"\"\n    This function calculates the calibration factors for the LISS III/AWiFS bands.\n\n    Parameters:\n            file_liss (str): path to the composite image of LISS III or AWiFS\n            file_ref (str): path to the composite image of the reference image\n\n    Returns:\n            None\n    \"\"\"\n\n    opf_resample = resample_image(file_liss, file_ref)\n\n    print('Calculating calibration factors.')\n\n    with rasterio.open(opf_resample) as r:\n        liss = r.read().astype('float32')\n        param = r.profile\n        print('LISS III shape:', liss.shape)\n\n    param.update(count = 1)\n    with rasterio.open(file_ref) as r:\n        ref = r.read().astype('float32')\n        print('Reference shape:', ref.shape)\n\n    cal_path = os.path.join(os.path.dirname(file_liss), 'Calibrated')\n    if os.path.exists(cal_path):\n        shutil.rmtree(cal_path)\n    os.makedirs(cal_path)\n\n    num_bands = liss.shape[0]\n    cal_liss = np.zeros((liss.shape[1], liss.shape[2]), dtype = 'float32')\n    sbaf = []\n    for i in range(num_bands):\n        band_liss = liss[i,:,:]\n        band_reference = ref[i,:,:]\n        sbaf.append(np.nanmean(band_reference)/np.nanmean(band_liss))\n        sbaf_temp = sbaf[i]\n\n        print(f'Calibrating band {i+2}...')\n        print('Factor:', sbaf_temp)\n        cal_liss = band_liss * sbaf_temp\n        opf_cal = os.path.join(cal_path, f'Band_{i+2}_cal.TIF')\n        with rasterio.open(opf_cal, 'w', **param) as r:\n            r.write(cal_liss, 1)\n\n\n    os.remove(opf_resample)\n    os.remove(file_liss)\n    os.remove(file_ref)\n\n    print(\"'Done'\")\n    return (sbaf, cal_liss, band_liss, band_reference)\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.create_multiband_image","title":"<code>create_multiband_image(inpf_liss, inpf_ref, files_liss, files_ref, reference_sensor)</code>","text":"<p>This function creates a composite image from the reflectance images of LISS III and AWiFS and the reference image.</p> <p>Parameters:</p> Name Type Description Default <code>inpf_liss</code> <code>str</code> <p>path to folder containing the reflectance images of LISS III or AWiFS</p> required <code>inpf_ref</code> <code>str</code> <p>path to folder containing the reflectance reference images.</p> required <code>files_liss</code> <code>str</code> <p>list of reflectance images of LISS III or AWiFS</p> required <code>files_ref</code> <code>str</code> <p>list of reflectance images of the reference image</p> required <code>reference_sensor</code> <code>str</code> <p>name of the reference sensor. Inherited from the <code>cross_calibration</code> function.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def create_multiband_image(inpf_liss, inpf_ref, files_liss, files_ref, reference_sensor):\n\n\"\"\"\n    This function creates a composite image from the reflectance images of LISS III and AWiFS and the reference image.\n\n    Parameters:\n            inpf_liss (str): path to folder containing the reflectance images of LISS III or AWiFS\n            inpf_ref (str): path to folder containing the reflectance reference images.\n            files_liss (str): list of reflectance images of LISS III or AWiFS\n            files_ref (str): list of reflectance images of the reference image\n            reference_sensor (str): name of the reference sensor. Inherited from the `cross_calibration` function.\n\n    Returns:\n            None\n    \"\"\"\n\n    print('Stacking: LISS III/AWiFS.')\n    with rasterio.open(os.path.join(inpf_liss, files_liss[0])) as src:\n        profile = src.profile\n        multi_band_liss = np.zeros((profile['height'], profile['width'], len(files_liss)))\n\n    for i, filename in enumerate(files_liss):\n        with rasterio.open(os.path.join(inpf_liss, filename)) as src:\n            multi_band_liss[:,:,i] = src.read(1)\n\n    profile.update(count = multi_band_liss.shape[2])\n    profile.update(dtype = 'float32')\n    op_liss = os.path.join(inpf_liss, 'composite.TIF')\n    with rasterio.open(op_liss, 'w', **profile) as dst:\n        dst.write(np.rollaxis(multi_band_liss.astype(profile['dtype']), axis=2))\n    dst.close()\n\n''' Reference Image Composite '''\n\n    print(f'Stacking: {reference_sensor} image.')\n    with rasterio.open(os.path.join(inpf_ref, files_ref[0])) as src:\n        profile = src.profile\n        multi_band_ref = np.zeros((profile['height'], profile['width'], len(files_ref)))\n\n    if reference_sensor == 'Sentinel 2':\n        for i, filename in enumerate(files_ref):\n            with rasterio.open(os.path.join(inpf_ref, filename)) as src:\n                multi_band_ref[:,:,i] = src.read(1).astype('float32')*0.0001\n\n    elif reference_sensor == 'Landsat 8':\n        for i, filename in enumerate(files_ref):\n            opf = landsat.landsat_ref(inpf_ref, filename)\n            with rasterio.open(os.path.join(opf, filename)) as src:\n                multi_band_ref[:,:,i] = src.read(1).astype('float32')\n\n    else:\n        for i, filename in enumerate(files_ref):\n            with rasterio.open(os.path.join(inpf_ref, filename)) as src:\n                multi_band_ref[:,:,i] = src.read(1).astype('float32')\n\n    profile.update(count = multi_band_ref.shape[2])\n    profile.update(dtype = 'float32')\n    op_ref = os.path.join(inpf_ref, 'composite_ref.TIF')\n    with rasterio.open(op_ref, 'w', **profile) as dst:\n        dst.write(np.rollaxis(multi_band_ref, axis=2))\n    dst.close()\n\n    return (op_liss, op_ref)\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.do_calibration","title":"<code>do_calibration(inpf_liss, inpf_ref, reference_sensor)</code>","text":"<p>This is the main function.  It calls the <code>do_ref</code> function to create the reflectance images of LISS III or AWiFS and the reference image. Then calls <code>do_mulitband</code> function to create layer stacks. Finally calls <code>calc_calibration</code> for calibration factors.</p> <p>Parameters:</p> Name Type Description Default <code>inpf_liss</code> <code>str</code> <p>path to folder containing the reflectance images of LISS III or AWiFS</p> required <code>inpf_ref</code> <code>str</code> <p>path to folder containing the reflectance images of the reference image</p> required <code>reference_sensor</code> <code>str</code> <p>name of the reference sensor.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def do_calibration(inpf_liss, inpf_ref, reference_sensor):\n\n\"\"\"\n    This is the main function. \n    It calls the `do_ref` function to create the reflectance images of LISS III or AWiFS and the reference image.\n    Then calls `do_mulitband` function to create layer stacks. Finally calls `calc_calibration` for calibration factors.\n\n    Parameters:\n            inpf_liss (str): path to folder containing the reflectance images of LISS III or AWiFS\n            inpf_ref (str): path to folder containing the reflectance images of the reference image\n            reference_sensor (str, optional): name of the reference sensor.\n\n    Returns:\n            None\n    \"\"\"\n\n    opf = os.path.join(inpf_liss, 'Reflectance')\n    if os.path.exists(opf):\n        shutil.rmtree(opf)\n    os.makedirs(opf)\n\n    do_ref(inpf_liss, opf)\n\n    op_liss, op_ref = do_multiband(opf, inpf_ref, reference_sensor)\n    sbaf, cal_liss, ref_liss, ref_band = calc_calibration(op_liss, op_ref)\n\n    return None\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.do_multiband","title":"<code>do_multiband(inpf_liss, inpf_ref, reference_sensor)</code>","text":"<p>This function calls the <code>create_multiband_image</code> function to create a composite image from the reflectance images of LISS III and AWiFS and the reference image.</p> <p>Parameters:</p> Name Type Description Default <code>inpf_liss</code> <code>str</code> <p>path to folder containing the reflectance images of LISS III or AWiFS</p> required <code>inpf_ref</code> <code>str</code> <p>path to folder containing the reflectance images of the reference image</p> required <code>reference_sensor</code> <code>str</code> <p>name of the reference sensor. Inherited from the <code>cross_calibration</code> function.</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def do_multiband(inpf_liss, inpf_ref, reference_sensor):\n\n\"\"\"\n    This function calls the `create_multiband_image` function to create a composite image from the reflectance images of LISS III and AWiFS and the reference image.\n\n    Parameters:\n            inpf_liss (str): path to folder containing the reflectance images of LISS III or AWiFS\n            inpf_ref (str): path to folder containing the reflectance images of the reference image\n            reference_sensor (str): name of the reference sensor. Inherited from the `cross_calibration` function.\n\n    Returns:\n            None\n    \"\"\"\n\n    original = os.listdir(inpf_liss)\n    gtif_liss = list(filter(lambda x: x.endswith((\"tif\", \"TIF\", \"img\")), original))\n\n    original = os.listdir(inpf_ref)\n    gtif_ref = list(filter(lambda x: x.endswith((\"tif\", \"TIF\", \"img\")), original))\n\n    op_liss, op_ref = create_multiband_image(inpf_liss, inpf_ref, gtif_liss, gtif_ref, reference_sensor)\n    return (op_liss, op_ref)\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.do_ref","title":"<code>do_ref(inpf, opf)</code>","text":"<p>This function calls the <code>toa_reflect</code> function to convert the radiance values to reflectance values.</p> <p>Parameters:</p> Name Type Description Default <code>inpf</code> <code>str</code> <p>path to folder containing the radiance images</p> required <code>opf</code> <code>str</code> <p>path to folder where the reflectance images will be saved</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def do_ref(inpf, opf):\n\n\"\"\"\n    This function calls the `toa_reflect` function to convert the radiance values to reflectance values.\n\n    Parameters:\n            inpf (str): path to folder containing the radiance images\n            opf (str): path to folder where the reflectance images will be saved\n\n    Returns:\n            None\n    \"\"\"\n\n    print('Radiance to reflectance conversion: LISS III/AWiFS.')\n\n    original = os.listdir(inpf)\n    gtif = list(filter(lambda x: x.endswith((\"tif\", \"TIF\", \"img\")), original))\n    for gi in gtif:\n        band_no = int(''.join(list(filter(str.isdigit, gi))))\n        toa_reflect(inpf, gi, opf, band_no)\n\n    return None\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.meta","title":"<code>meta(inpf, keyword)</code>","text":"<p>This function reads the metadata file of the LISS III and AWiFS images and returns the value of the keyword provided.</p> <p>Parameters:</p> Name Type Description Default <code>inpf</code> <code>str</code> <p>path to folder containing the radiance image and the *_META.txt file</p> required <code>keyword</code> <code>str</code> <p>keyword to be searched in the metadata file</p> required <p>Returns:</p> Type Description <code>meta (float)</code> <p>value of the keyword</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def meta(inpf, keyword):\n\n\"\"\" \n    This function reads the metadata file of the LISS III and AWiFS images and returns the value of the keyword provided.\n    Parameters:\n            inpf (str): path to folder containing the radiance image and the *_META.txt file\n            keyword (str): keyword to be searched in the metadata file\n\n    Returns:\n            meta (float): value of the keyword\n    \"\"\"\n\n    file = open(glob.glob(os.path.join(inpf, '*_META.txt'))[0]).readlines()\n    meta = \"\"\n\n    for lines in file:\n        if keyword in lines:\n            meta = float(lines.split(\"=\")[-1].strip())\n    return meta\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.resample_image","title":"<code>resample_image(file_liss, file_ref)</code>","text":"<p>This function resamples the LISS III image to the reference image.</p> <p>Parameters:</p> Name Type Description Default <code>file_liss</code> <code>str</code> <p>path to the LISS III image</p> required <code>file_ref</code> <code>str</code> <p>path to the reference image</p> required <p>Returns:</p> Type Description <code>opf_resample (str)</code> <p>path to the resampled LISS III image</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def resample_image(file_liss, file_ref):\n\n\"\"\"\n    This function resamples the LISS III image to the reference image.\n\n    Parameters:\n            file_liss (str): path to the LISS III image\n            file_ref (str): path to the reference image\n\n    Returns:\n            opf_resample (str): path to the resampled LISS III image\n    \"\"\"\n\n    print('Resampling: LISS III to reference image')\n\n    reference = gdal.Open(file_ref, 0)\n    projection = reference.GetProjectionRef()\n    referenceTrans = reference.GetGeoTransform()\n    x_res = referenceTrans[1]\n    y_res = -referenceTrans[5]\n\n    opf_resample = os.path.join(os.path.dirname(file_liss), os.path.basename(file_liss).split('.')[0] + '_resample.TIF')\n\n    kwargs = {\"format\": \"GTiff\", \"xRes\": x_res, \"yRes\": y_res}\n    ds = gdal.Warp(opf_resample, file_liss, dstSRS = projection, **kwargs)\n    ds = None\n\n    return opf_resample\n</code></pre>"},{"location":"cross_cal_resourcesat/#cross_cal_resourcesat.cross_cal_resourcesat.toa_reflect","title":"<code>toa_reflect(inpf, inp_name, opf, band_no)</code>","text":"<p>This function converts the radiance values to reflectance values for LISS III and AWiFS. </p> <p>Parameters:</p> Name Type Description Default <code>inpf</code> <code>str</code> <p>path to folder containing the radiance image</p> required <code>inp_name</code> <code>str</code> <p>name of the radiance image</p> required <code>opf</code> <code>str</code> <p>path to folder where the reflectance image will be saved</p> required <code>band_no</code> <code>int</code> <p>band number of the image</p> required <p>Returns:</p> Type Description <p>None</p> Source code in <code>cross_cal_resourcesat/cross_cal_resourcesat.py</code> <pre><code>def toa_reflect(inpf, inp_name, opf, band_no):\n\n\"\"\"\n    This function converts the radiance values to reflectance values for LISS III and AWiFS. \n\n    Parameters:\n            inpf (str): path to folder containing the radiance image\n            inp_name (str): name of the radiance image\n            opf (str): path to folder where the reflectance image will be saved\n            band_no (int): band number of the image\n\n    Returns:\n            None\n    \"\"\"\n\n    esol = {'B2': 1849.5, 'B3': 1553.0, 'B4': 1092.0, 'B5': 239.52}\n    esol_band = list(esol.values())[band_no-2]\n\n    lmax, lmin, sun_elev = meta(inpf, f'B{band_no}_Lmax'), meta(inpf, f'B{band_no}_Lmin'), meta(inpf, 'SunElevationAtCenter')\n\n    with rasterio.open(os.path.join(inpf, inp_name)) as r:\n        param = r.profile\n        toa_raw = r.read(1).astype('float32')\n\n    param.update(dtype = 'float32')\n    toa_raw[toa_raw == 0] = np.nan\n    toa_rad = lmin + ((lmax - lmin)/1024)*toa_raw\n    reflectance = (np.pi * 1 * toa_rad) / (esol_band * math.sin(math.radians(sun_elev)))\n\n    reflectance[reflectance&gt;1] = np.nan\n    reflectance[reflectance&lt;0] = np.nan\n    if (np.nanmax(reflectance) &lt;= np.nanpercentile(reflectance, 99.99)):\n        reflectance = reflectance\n    else:\n        reflectance[reflectance&gt;=np.nanpercentile(reflectance, 99.99)] = np.nanpercentile(reflectance, 99.999)\n\n    op_name = os.path.basename(inp_name).split('.')[0] + '_ref.TIF'\n    with rasterio.open(os.path.join(opf, op_name), 'w', **param) as r:\n        r.write(reflectance, 1)\n\n    return None\n</code></pre>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install cross_cal_resourcesat, run this command in your terminal:</p> <pre><code>pip install cross_cal_resourcesat\n</code></pre> <p>This is the preferred method to install cross_cal_resourcesat, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for cross_cal_resourcesat can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/akhi9661/cross_cal_resourcesat\n</code></pre>"},{"location":"landsat/","title":"landsat module","text":""},{"location":"landsat/#cross_cal_resourcesat.landsat.landsat_ref","title":"<code>landsat_ref(inpf, inp_file)</code>","text":"<p>This function converts Landsat 8 radiance image into reflectance image.</p> <p>Parameters:</p> Name Type Description Default <code>inpf</code> <code>str</code> <p>Path to folder containing Landsat 8 radiance and MTL.txt file</p> required <code>inp_file</code> <code>str</code> <p>Name of the file</p> required <p>Returns:</p> Type Description <code>opf (str)</code> <p>Path of the output folder. </p> Source code in <code>cross_cal_resourcesat/landsat.py</code> <pre><code>def landsat_ref(inpf, inp_file):\n\n\"\"\"\n    This function converts Landsat 8 radiance image into reflectance image.\n\n    Parameters:\n            inpf (str): Path to folder containing Landsat 8 radiance and MTL.txt file\n            inp_file (str): Name of the file\n\n    Returns:\n            opf (str): Path of the output folder. \n    \"\"\"\n\n    opf = os.path.join(inpf, 'Reflectance')\n    os.makedirs(opf, exist_ok = True)\n\n    with (rasterio.open)(os.path.join(inpf, inp_file)) as (r):\n        toa = r.read(1).astype('float32')\n        param = r.profile\n    toa[toa == 0] = np.nan\n    param.update(dtype = 'float32')\n\n    esun = meta_l8(inpf, 'EARTH_SUN_DISTANCE')\n    reflectance_mult_band = meta_l8(inpf, 'REFLECTANCE_MULT_BAND_1')\n    reflectance_add_band = meta_l8(inpf, 'REFLECTANCE_ADD_BAND_1')\n    sun_elev_deg = meta_l8(inpf, 'SUN_ELEVATION')\n\n''' Ref: https://www.usgs.gov/landsat-missions/using-usgs-landsat-level-1-data-product '''\n\n    toa_reflectance = ((reflectance_mult_band * toa) + reflectance_add_band)/math.sin(math.radians(sun_elev_deg))\n\n    toa_reflectance[toa_reflectance&gt;=1] = np.nan\n    toa_reflectance[toa_reflectance&lt;0] = 0\n    if (np.nanmax(toa_reflectance) &lt;= np.nanpercentile(toa_reflectance, 99.99)):\n        toa_reflectance = toa_reflectance\n    else:\n        toa_reflectance[toa_reflectance&gt;=np.nanpercentile(toa_reflectance, 99.99)] = np.nanpercentile(toa_reflectance, 99.999)\n\n    with (rasterio.open)((os.path.join(opf, inp_file)), 'w', **param) as (w):\n        w.write(toa_reflectance, 1)\n\n    return opf\n</code></pre>"},{"location":"landsat/#cross_cal_resourcesat.landsat.meta_l8","title":"<code>meta_l8(path, keyword)</code>","text":"<p>This function reads the metadata file of the LISS III and AWiFS images and returns the value of the keyword provided.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>path to folder containing the radiance image and the *_META.txt file</p> required <code>keyword</code> <code>str</code> <p>keyword to be searched in the metadata file</p> required <p>Returns:</p> Type Description <code>meta (float)</code> <p>value of the keyword</p> Source code in <code>cross_cal_resourcesat/landsat.py</code> <pre><code>def meta_l8(path, keyword):\n\n\"\"\" \n    This function reads the metadata file of the LISS III and AWiFS images and returns the value of the keyword provided.\n    Parameters:\n            path (str): path to folder containing the radiance image and the *_META.txt file\n            keyword (str): keyword to be searched in the metadata file\n\n    Returns:\n            meta (float): value of the keyword\n    \"\"\"\n\n    try:\n\n        file = open(glob.glob(os.path.join(path, '*_MTL.txt'))[0]).readlines()\n        meta = \"\"\n\n        for lines in file:\n            if keyword in lines:\n                meta = float(lines.split(\"=\")[-1].strip())\n        return meta\n\n    except:\n        print('No MTL.txt file found.')\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use cross_cal_resourcesat in a project:</p>"},{"location":"usage/#cross_cal_resourcesat","title":"cross_cal_resourcesat","text":""},{"location":"usage/#introduction","title":"Introduction","text":"<p>This package applies a cross calibrates LISS III and AWiFS with the help of a reference image like Landsat 8 and Sentinel 2.</p> <p>Takes two inputs: - <code>inpf_liss</code> = path to folder LISS III or AWiFS bands - <code>inpf_ref</code> = path to folder containing reference image bands. Could be Landsat 8 or Sentinel 2.</p> <p>Final output folder:  - <code>inpf_liss\\Reflectance\\Calibration</code></p> <p>Three temporary images are also generated which are automatically deleted after the execution. These are two composite images, and one resampled image.</p>"},{"location":"usage/#how-to-use","title":"How to use","text":"<ul> <li>Clone the repository in the desired folder.</li> </ul> <pre><code>git clone https://github.com/akhi9661/cross_cal_resourcesat.git\n</code></pre> <p>In case this fails, download the zip file and extract it in a folder. </p> <ul> <li>Install the required dependencies.</li> </ul> <p><pre><code>pip install -r requirements.txt\n</code></pre> If it throws up an error, create a new virtual environment and install the dependencies. Installation of <code>GDAL</code> and <code>rasterio</code> is complex and generally fails in the base environment or an already existing environment. Creating a new virtual environment generally resolves this.</p>"},{"location":"usage/#1-to-run-the-library-from-the-command-line-use","title":"1. To run the library from the command line, use:","text":"<p><pre><code>python main.py\n</code></pre> Enter the input as prompted.</p>"},{"location":"usage/#2-to-use-the-library-in-the-program","title":"2. To use the library in the program:","text":"<ul> <li>First install the library.</li> </ul> <p><pre><code>pip install cross_cal_resourcesat\n</code></pre> - Import the dependencies in the environment</p> <p><pre><code>import rasterio, os, re, math, glob, shutil\nfrom osgeo import gdal, osr, gdalconst\nimport numpy as np\n</code></pre> - Import the library <pre><code>import cross_cal_resourcesat\n</code></pre> - Set the path to uncalibrated and reference image. The path provided should be absolute path and not relative.</p> <p><pre><code>inpf_liss = r'\\docs\\Examples\\liss'\ninpf_l8 = r'\\docs\\Examples\\ref_l8'\n</code></pre> - Call the <code>do_calibration</code> function.</p> <p><pre><code>cross_cal_resourcesat.do_calibration(inpf_liss = inpf_liss, inpf_ref = inpf_l8, reference_sensor = 'Landsat 8')\n</code></pre> To use other reference sensors, select <code>reference_sensor = 'Sentinel 2'</code> or <code>reference_sensor = 'Others'</code></p> <p>Note: If reference sensor, other than Landsat 8 or Sentinel 2 is used, the path <code>inpf_ref</code> should be the path to folder containing reflectance images of reference sensor and not radiance images.</p>"}]}